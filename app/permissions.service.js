"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var database_service_1 = require("./common/database.service");
var PermissionsService = /** @class */ (function () {
    function PermissionsService(databaseService) {
        this.databaseService = databaseService;
        this.user = 'default';
        this.currentUserClass = 'default';
        this.knownUsers = {
            'admin': { group: 'admin', hash: '6789', email: 'jonathan.p.h.kelly@gmail.com', mcType: 'user' },
            'maintainer': { group: 'maintainer', hash: '6789', email: 'jonathan.p.h.kelly@gmail.com', mcType: 'user' },
            'pilot': { group: 'pilot', hash: '6789', email: 'jonathan.p.h.kelly@gmail.com', mcType: 'user' },
            'default': { group: 'default', hash: '6789', email: 'jonathan.p.h.kelly@gmail.com', mcType: 'user' }
        };
        this.permissionsStore = {
            'default': {
                'CAN_ADD_USER': false,
                'CAN_ADD_AIRCRAFT': false,
                'CAN_CHANGE_HOURS': false,
                'CAN_CLEAR_MR_ITEMS': false,
                'CAN_CHANGE_MR': false,
                'CAN_DELETE_AIRCRAFT': false,
                'CAN_DELETE_USER': false,
                'CAN_ADJUST_USER': false,
                'CAN_CHANGE_PW': false
            },
            'pilot': {
                'CAN_ADD_USER': false,
                'CAN_ADD_AIRCRAFT': false,
                'CAN_CHANGE_HOURS': true,
                'CAN_CLEAR_MR_ITEMS': true,
                'CAN_CHANGE_MR': false,
                'CAN_DELETE_AIRCRAFT': false,
                'CAN_DELETE_USER': false,
                'CAN_ADJUST_USER': false,
                'CAN_CHANGE_PW': true
            },
            'maintainer': {
                'CAN_ADD_USER': false,
                'CAN_ADD_AIRCRAFT': true,
                'CAN_CHANGE_HOURS': true,
                'CAN_CLEAR_MR_ITEMS': true,
                'CAN_CHANGE_MR': true,
                'CAN_DELETE_AIRCRAFT': true,
                'CAN_DELETE_USER': false,
                'CAN_ADJUST_USER': false,
                'CAN_CHANGE_PW': true
            },
            'admin': {
                'CAN_ADD_USER': true,
                'CAN_ADD_AIRCRAFT': true,
                'CAN_CHANGE_HOURS': true,
                'CAN_CLEAR_MR_ITEMS': true,
                'CAN_CHANGE_MR': true,
                'CAN_DELETE_AIRCRAFT': true,
                'CAN_DELETE_USER': true,
                'CAN_ADJUST_USER': true,
                'CAN_CHANGE_PW': true
            }
        };
        this.databaseService.setDb("aircraft-database");
        this.databaseService.createView("user", "user");
        this.users = this.databaseService.query("user");
        console.log(this.users);
        for (var i = 0; i < this.users.length; i++) {
            var doc = this.users[i];
            this.knownUsers[doc.user] = doc;
            //let documentId = this.databaseService.createDocument(doc, "user");
        }
    }
    PermissionsService.prototype.addNewUser = function (user, pw, userClass) {
        var hash = this.hashPw(pw);
        var doc = { group: userClass, hash: hash, email: 'jonathan.p.h.kelly@gmail.com', mcType: "user", user: user };
        console.log('u', doc);
        var documentId = this.databaseService.createDocument(doc, "user");
        console.log('v', doc);
        this.knownUsers[user] = doc;
    };
    PermissionsService.prototype.can = function (item) {
        return this.checkPerms(this.currentUserClass, item);
    };
    PermissionsService.prototype.checkPerms = function (userClass, item) {
        if (this.permissionsStore[userClass] === undefined) {
            alert('user class: ' + item + ' not known');
            return false;
        }
        if (this.permissionsStore[userClass][item] !== undefined) {
            return this.permissionsStore[userClass][item];
        }
        alert('do not know permission: ' + item + ' for user class: ' + userClass);
        return false;
    };
    PermissionsService.prototype.deleteUser = function (user) {
        delete this.knownUsers[user];
    };
    PermissionsService.prototype.getClassOfUser = function (user) {
        if (this.knownUsers[user] !== undefined) {
            return this.knownUsers[user].group;
        }
        return 'default';
    };
    PermissionsService.prototype.getCurrentUser = function () {
        return this.user;
    };
    PermissionsService.prototype.getCurrentUserClass = function () {
        return this.currentUserClass;
    };
    PermissionsService.prototype.getUserNames = function () {
        return Object.keys(this.knownUsers);
    };
    PermissionsService.prototype.hashPw = function (pw) {
        return pw;
    };
    PermissionsService.prototype.isAdminAccess = function () {
        return (this.getCurrentUser() === 'admin');
    };
    PermissionsService.prototype.logOut = function () {
    };
    PermissionsService.prototype.setCurrentUserClass = function (userClass) {
        this.currentUserClass = userClass;
    };
    PermissionsService.prototype.setUser = function (user) {
        if (this.knownUsers[user] !== undefined) {
            this.user = user;
        }
        else {
            alert('I do not know: ' + user + '. Using default access');
            this.user = 'default';
        }
        this.setCurrentUserClass(this.getClassOfUser(this.user));
        console.log(user, this.permissionsStore[this.currentUserClass]);
    };
    PermissionsService.prototype.setUserClass = function (user, group) {
        this.knownUsers[user].group = group;
    };
    PermissionsService.prototype.setUserPw = function (user, pw) {
        this.knownUsers[user].hash = this.hashPw(pw);
    };
    PermissionsService.prototype.setPerms = function (userClass, item, value) {
        if (this.permissionsStore[userClass] !== undefined) {
            if (this.permissionsStore[userClass][item] === undefined) {
                alert('adding new permission: ' + item + ' for user class: ' + userClass);
            }
            this.permissionsStore[userClass][item] = value;
        }
        else {
            alert('user class: ' + item + ' not known');
        }
    };
    PermissionsService.prototype.userExists = function (user) {
        return (this.knownUsers[user] !== undefined);
    };
    PermissionsService.prototype.validateUser = function (user, pwHash) {
        if (this.userExists(user)) {
            return (this.knownUsers[user].hash === pwHash);
        }
        return false;
    };
    PermissionsService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [database_service_1.DatabaseService])
    ], PermissionsService);
    return PermissionsService;
}());
exports.PermissionsService = PermissionsService;
//# sourceMappingURL=data:application/json;base64,