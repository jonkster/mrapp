"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var router_1 = require("nativescript-angular/router");
var angular_1 = require("nativescript-ui-sidedrawer/angular");
var app_component_1 = require("../app.component");
var fleet_service_1 = require("../common/fleet.service");
var SummaryComponent = /** @class */ (function () {
    function SummaryComponent(_changeDetectionRef, routerExtensions, appComponent, fleetService) {
        this._changeDetectionRef = _changeDetectionRef;
        this.routerExtensions = routerExtensions;
        this.appComponent = appComponent;
        this.fleetService = fleetService;
        this.sortOrder = 'alphabetic';
        this.readyToShow = false;
        this.fleetService.setBusy();
    }
    SummaryComponent.prototype.ngOnInit = function () {
        this.fleet = this.fleetService.getFleet();
        this.changeSortOrder();
    };
    SummaryComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.drawer = this.drawerComponent.sideDrawer;
        this._changeDetectionRef.detectChanges();
        setTimeout(function () {
            _this.readyToShow = true;
        }, 1000);
    };
    SummaryComponent.prototype.changeSortOrder = function () {
        if (this.sortOrder === 'type') {
            this.fleet.sort(function (a, b) {
                if (a.type < b.type) {
                    return -1;
                }
                else if (a.type > b.type) {
                    return 1;
                }
                else if (a.rego < b.rego) {
                    return -1;
                }
                else if (a.rego > b.rego) {
                    return 1;
                }
                else {
                    return 0;
                }
            });
        }
        else if (this.sortOrder === 'alphabetic') {
            this.fleet.sort(function (a, b) {
                if (a.rego < b.rego) {
                    return -1;
                }
                else if (a.rego > b.rego) {
                    return 1;
                }
                else {
                    return 0;
                }
            });
        }
    };
    SummaryComponent.prototype.getAnnualDate = function (ac) {
        return ac.annualDateTuple.join('/');
    };
    SummaryComponent.prototype.getEngineOH = function (ac) {
        return ac.engineHrsAtMaint.join('/');
    };
    SummaryComponent.prototype.getPropOH = function (ac) {
        return ac.propHrsAtMaint.join('/');
    };
    SummaryComponent.prototype.toggleOrder = function () {
        if (this.sortOrder === 'type') {
            this.sortOrder = 'alphabetic';
        }
        else if (this.sortOrder === 'alphabetic') {
            this.sortOrder = 'type';
        }
        this.changeSortOrder();
    };
    __decorate([
        core_1.ViewChild(angular_1.RadSideDrawerComponent),
        __metadata("design:type", angular_1.RadSideDrawerComponent)
    ], SummaryComponent.prototype, "drawerComponent", void 0);
    SummaryComponent = __decorate([
        core_1.Component({
            moduleId: module.id,
            selector: 'app-summary',
            templateUrl: './summary.component.html',
            styleUrls: ['./summary.component.scss']
        }),
        __metadata("design:paramtypes", [core_1.ChangeDetectorRef,
            router_1.RouterExtensions,
            app_component_1.AppComponent,
            fleet_service_1.FleetService])
    ], SummaryComponent);
    return SummaryComponent;
}());
exports.SummaryComponent = SummaryComponent;
//# sourceMappingURL=data:application/json;base64,