"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var router_1 = require("@angular/router");
var router_2 = require("nativescript-angular/router");
var fleet_service_1 = require("../common/fleet.service");
//import { AircraftService } from "../common/aircraft.service";
var EngineTimeComponent = /** @class */ (function () {
    function EngineTimeComponent(route, routerExtensions, fleetService) {
        this.route = route;
        this.routerExtensions = routerExtensions;
        this.fleetService = fleetService;
        this.twin = false;
        this.eng = [];
        this.prop = [];
    }
    EngineTimeComponent.prototype.ngOnInit = function () {
        var id = this.route.snapshot.params["id"];
        this.aircraft = this.fleetService.getAircraft(id);
        this.twin = this.aircraft.engineHrsAtMaint.length > 1;
        for (var i = 0; i < this.aircraft.engineHrsAtMaint.length; i++) {
            this.eng.push(this.aircraft.engineHrsAtMaint[i].toString());
            this.prop.push(this.aircraft.propHrsAtMaint[i].toString());
        }
    };
    EngineTimeComponent.prototype.cancel = function () {
        this.routerExtensions.navigate(["/aircraftDetails/" + this.aircraft._id], { clearHistory: true });
    };
    EngineTimeComponent.prototype.save = function () {
        for (var i = 0; i < this.aircraft.engineHrsAtMaint.length; i++) {
            this.aircraft.engineHrsAtMaint[i] = Number(this.eng[i]);
            this.aircraft.propHrsAtMaint[i] = Number(this.prop[i]);
        }
        this.fleetService.updateAircraft(this.aircraft);
        this.routerExtensions.navigate(["/aircraftDetails/" + this.aircraft._id], { clearHistory: true });
    };
    EngineTimeComponent.prototype.getHrs = function (unit, num) {
        var h = '';
        if (unit === 'prop') {
            h = this.prop[num];
        }
        else {
            h = this.eng[num];
        }
        if (h === '987654321') {
            h = 'OC';
        }
        return h;
    };
    EngineTimeComponent.prototype.setOC = function (ev, unit, num) {
        if (ev.object.checked) {
            if (unit === 'prop') {
                this.prop[num] = '987654321';
            }
            else {
                this.eng[num] = '987654321';
            }
        }
    };
    EngineTimeComponent.prototype.updateHrs = function (unit, num, ev) {
        var v = ev.object.text;
        if (v === 'OC') {
            v = 987654321;
        }
        if (unit === 'prop') {
            this.aircraft.propHrsAtMaint[num] = v;
        }
        else {
            this.aircraft.engineHrsAtMaint[num] = v;
        }
    };
    EngineTimeComponent = __decorate([
        core_1.Component({
            moduleId: module.id,
            selector: 'app-engine-time',
            templateUrl: './engine-time.component.html',
            styleUrls: ['./engine-time.component.scss']
        }),
        __metadata("design:paramtypes", [router_1.ActivatedRoute, router_2.RouterExtensions, fleet_service_1.FleetService])
    ], EngineTimeComponent);
    return EngineTimeComponent;
}());
exports.EngineTimeComponent = EngineTimeComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5naW5lLXRpbWUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZW5naW5lLXRpbWUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0NBQWtEO0FBQ2xELDBDQUFpRDtBQUNqRCxzREFBK0Q7QUFFL0QseURBQXVEO0FBQ3ZELCtEQUErRDtBQVEvRDtJQU9RLDZCQUFvQixLQUFxQixFQUFVLGdCQUFrQyxFQUFVLFlBQTBCO1FBQXJHLFVBQUssR0FBTCxLQUFLLENBQWdCO1FBQVUscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUFVLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBTmpILFNBQUksR0FBWSxLQUFLLENBQUM7UUFHN0IsUUFBRyxHQUFhLEVBQUUsQ0FBQztRQUNuQixTQUFJLEdBQWEsRUFBRSxDQUFDO0lBR3JCLENBQUM7SUFFRCxzQ0FBUSxHQUFSO1FBQ1EsSUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbEQsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7UUFFcEUsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQ2hFLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztZQUM1RCxJQUFJLENBQUMsSUFBSSxDQUFDLElB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QyxJQUFJLENBQUMsQ0FBQztZQUNQLElBQUksQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3pDLENBQUM7SUFDRixDQUFDO0lBbkVXLG1CQUFtQjtRQU4vQixnQkFBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLE1BQU0sQ0FBQyxFQUFFO1lBQ25CLFFBQVEsRUFBRSxpQkFBaUI7WUFDM0IsV0FBVyxFQUFFLDhCQUE4QjtZQUMzQyxTQUFTLEVBQUUsQ0FBQyw4QkFBOEIsQ0FBQztTQUM1QyxDQUFDO3lDQVFpQyx1QkFBYyxFQUE0Qix5QkFBZ0IsRUFBd0IsNEJBQVk7T0FQcEgsbUJBQW1CLENBb0UvQjtJQUFELDBCQUFDO0NBQUEsQUFwRUQsSUFvRUM7QUFwRVksa0RBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFjdGl2YXRlZFJvdXRlIH0gZnJvbSBcIkBhbmd1bGFyL3JvdXRlclwiO1xuaW1wb3J0IHsgUm91dGVyRXh0ZW5zaW9ucyB9IGZyb20gXCJuYXRpdmVzY3JpcHQtYW5ndWxhci9yb3V0ZXJcIjtcbmltcG9ydCB7IEFpcmNyYWZ0LCBNYWludGVuYW5jZUl0ZW0gfSBmcm9tIFwiLi4vY29tbW9uL2FpcmNyYWZ0XCI7XG5pbXBvcnQgeyBGbGVldFNlcnZpY2UgfSBmcm9tIFwiLi4vY29tbW9uL2ZsZWV0LnNlcnZpY2VcIjtcbi8vaW1wb3J0IHsgQWlyY3JhZnRTZXJ2aWNlIH0gZnJvbSBcIi4uL2NvbW1vbi9haXJjcmFmdC5zZXJ2aWNlXCI7XG5cbkBDb21wb25lbnQoe1xuICBtb2R1bGVJZDogbW9kdWxlLmlkLFxuICBzZWxlY3RvcjogJ2FwcC1lbmdpbmUtdGltZScsXG4gIHRlbXBsYXRlVXJsOiAnLi9lbmdpbmUtdGltZS5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2VuZ2luZS10aW1lLmNvbXBvbmVudC5zY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgRW5naW5lVGltZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgICAgIHByaXZhdGUgdHdpbjogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgICAgIHByaXZhdGUgYWlyY3JhZnQ6IEFpcmNyYWZ0O1xuXHRwcml2YXRlIGVuZzogc3RyaW5nW10gPSBbXTtcblx0cHJpdmF0ZSBwcm9wOiBzdHJpbmdbXSA9IFtdO1xuXG4gICAgICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcm91dGU6IEFjdGl2YXRlZFJvdXRlLCBwcml2YXRlIHJvdXRlckV4dGVuc2lvbnM6IFJvdXRlckV4dGVuc2lvbnMsIHByaXZhdGUgZmxlZXRTZXJ2aWNlOiBGbGVldFNlcnZpY2UpIHtcbiAgICAgICAgfVxuXG4gICAgICAgIG5nT25Jbml0KCkgeyBcbiAgICAgICAgICAgICAgICBjb25zdCBpZCA9IHRoaXMucm91dGUuc25hcHNob3QucGFyYW1zW1wiaWRcIl07XG4gICAgICAgICAgICAgICAgdGhpcy5haXJjcmFmdCA9IHRoaXMuZmxlZXRTZXJ2aWNlLmdldEFpcmNyYWZ0KGlkKTtcbiAgICAgICAgICAgICAgICB0aGlzLnR3aW4gPSB0aGlzLmFpcmNyYWZ0LmVuZ2luZUhyc0F0TWFpbnQubGVuZ3RoID4gMTtcblx0XHRcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuYWlyY3JhZnQuZW5naW5lSHJzQXRNYWludC5sZW5ndGg7IGkrKykge1xuXHRcdFx0dGhpcy5lbmcucHVzaCh0aGlzLmFpcmNyYWZ0LmVuZ2luZUhyc0F0TWFpbnRbaV0udG9TdHJpbmcoKSk7XG5cdFx0XHR0aGlzLnByb3AucHVzaCh0aGlzLmFpcmNyYWZ0LnByb3BIcnNBdE1haW50W2ldLnRvU3RyaW5nKCkpO1xuXHRcdH1cbiAgICAgICAgfVxuXG4gICAgICAgIHB1YmxpYyBjYW5jZWwoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yb3V0ZXJFeHRlbnNpb25zLm5hdmlnYXRlKFtcIi9haXJjcmFmdERldGFpbHMvXCIgKyB0aGlzLmFpcmNyYWZ0Ll9pZF0sIHsgY2xlYXJIaXN0b3J5OiB0cnVlIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVibGljIHNhdmUoKSB7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmFpcmNyYWZ0LmVuZ2luZUhyc0F0TWFpbnQubGVuZ3RoOyBpKyspIHtcblx0XHRcdHRoaXMuYWlyY3JhZnQuZW5naW5lSHJzQXRNYWludFtpXSA9IE51bWJlcih0aGlzLmVuZ1tpXSk7XG5cdFx0XHR0aGlzLmFpcmNyYWZ0LnByb3BIcnNBdE1haW50W2ldID0gTnVtYmVyKHRoaXMucHJvcFtpXSk7XG5cdFx0fVxuICAgICAgICAgICAgICAgIHRoaXMuZmxlZXRTZXJ2aWNlLnVwZGF0ZUFpcmNyYWZ0KHRoaXMuYWlyY3JhZnQpO1xuICAgICAgICAgICAgICAgIHRoaXMucm91dGVyRXh0ZW5zaW9ucy5uYXZpZ2F0ZShbXCIvYWlyY3JhZnREZXRhaWxzL1wiICsgdGhpcy5haXJjcmFmdC5faWRdLCB7IGNsZWFySGlzdG9yeTogdHJ1ZSB9KTtcbiAgICAgICAgfVxuXG5cdGdldEhycyh1bml0OiBzdHJpbmcsIG51bTogbnVtYmVyKSB7XG5cdFx0bGV0IGggPSAnJztcblx0ICBcdGlmICh1bml0ID09PSAncHJvcCcpIHtcbiAgICAgICAgICAgICAgICBcdGggPSB0aGlzLnByb3BbbnVtXTtcblx0XHR9IGVsc2Uge1xuICAgICAgICAgICAgICAgIFx0aCA9IHRoaXMuZW5nW251bV07XG5cdFx0fVxuXHRcdGlmIChoID09PSAnOTg3NjU0MzIxJykge1xuXHRcdFx0aCA9ICdPQyc7XG5cdFx0fVxuXHRcdHJldHVybiBoO1xuXHR9XG5cblx0c2V0T0MoZXY6IGFueSwgdW5pdDogc3RyaW5nLCBudW06IG51bWJlcikge1xuICAgICAgICAgIGlmIChldi5vYmplY3QuY2hlY2tlZCkge1xuXHQgIFx0aWYgKHVuaXQgPT09ICdwcm9wJykge1xuICAgICAgICAgICAgICAgIFx0dGhpcy5wcm9wW251bV0gPSAnOTg3NjU0MzIxJztcblx0XHR9IGVsc2Uge1xuICAgICAgICAgICAgICAgIFx0dGhpcy5lbmdbbnVtXSA9ICc5ODc2NTQzMjEnO1xuXHRcdH1cblx0ICB9XG5cdH1cblxuXHR1cGRhdGVIcnModW5pdDogc3RyaW5nLCBudW06IG51bWJlciwgZXY6IGFueSkge1xuXHRcdGxldCB2ID0gZXYub2JqZWN0LnRleHQ7XG5cdFx0aWYgKHYgPT09ICdPQycpIHtcblx0XHRcdHYgPSA5ODc2NTQzMjE7XG5cdFx0fVxuXHRcdGlmICh1bml0ID09PSAncHJvcCcpIHtcblx0XHRcdHRoaXMuYWlyY3JhZnQucHJvcEhyc0F0TWFpbnRbbnVtXSA9IHY7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuYWlyY3JhZnQuZW5naW5lSHJzQXRNYWludFtudW1dID0gdjtcblx0XHR9XG5cdH1cbn1cbiJdfQ==