"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
/*import * as permissions from "nativescript-permissions";
import * as TNSPhone from 'nativescript-phone';*/
var email = require("nativescript-email");
var fleet_service_1 = require("./common/fleet.service");
var sprintf_js_1 = require("./node_modules/sprintf-js");
var fs = require("file-system");
var AppComponent = /** @class */ (function () {
    function AppComponent(fleetService) {
        this.fleetService = fleetService;
        var documents = fs.knownFolders.documents();
        var path = fs.path.join(documents.path, "reportFile.html");
        var file = fs.File.fromPath(path);
        this.composeOptions = {
            to: ['jonathan.p.h.kelly@gmail.com'],
            subject: 'Curtis Aviation Maintenance Report',
            attachments: [{
                    'fileName': 'reportFile.html',
                    'path': path,
                    'mimeType': 'text/html'
                }
            ]
        };
    }
    AppComponent.prototype.createAttachment = function (hdg, msg) {
        var documents = fs.knownFolders.documents();
        var path = fs.path.join(documents.path, "reportFile.html");
        var file = fs.File.fromPath(path);
        file.writeText('<b>' + hdg + '</b><hr/><pre>' + msg + '</pre>')
            .then(function (result) {
        })
            .catch(function (err) {
            console.log(err);
        });
        return true;
    };
    AppComponent.prototype.niceDate = function (d) {
        var weekDay = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
        var date = [d.getFullYear(), d.getMonth() + 1, d.getDate()];
        var time = [d.getHours(), d.getMinutes(), d.getSeconds()];
        // Determine AM or PM suffix based on the hour
        var suffix = (time[0] < 12) ? "AM" : "PM";
        // Convert hour from military time
        time[0] = (time[0] < 12) ? time[0] : time[0] - 12;
        // If hour is 0, set it to 12
        time[0] = time[0] || 12;
        // Return the formatted string
        return sprintf_js_1.sprintf("%s, %02d/%02d/%d, %02d:%02d:%02d %s", weekDay[d.getDay()], date[0], date[1], date[2], time[0], time[1], time[2], suffix);
    };
    AppComponent.prototype.notifySomeone = function (subj, hdg, attach) {
        var _this = this;
        email.available().then(function (available) {
            if (available) {
                if (_this.createAttachment(hdg, attach)) {
                    _this.composeOptions.subject = subj;
                    _this.composeOptions.body = "Please find " + hdg + " attached.";
                    email.compose(_this.composeOptions).then(function (result) {
                        if (result) {
                        }
                        else {
                        }
                    }).catch(function (error) { return console.log(error); });
                }
                else {
                    alert('could not generate email');
                }
            }
            else {
                alert('email not available');
            }
        }).catch(function (error) { return console.log(error); });
    };
    AppComponent = __decorate([
        core_1.Component({
            selector: "ns-app",
            templateUrl: "app.component.html",
        }),
        __metadata("design:paramtypes", [fleet_service_1.FleetService])
    ], AppComponent);
    return AppComponent;
}());
exports.AppComponent = AppComponent;
//# sourceMappingURL=data:application/json;base64,