"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var aircraft_service_1 = require("./aircraft.service");
var database_service_1 = require("./database.service");
var FleetService = /** @class */ (function () {
    function FleetService(aircraftService, databaseService) {
        this.aircraftService = aircraftService;
        this.databaseService = databaseService;
        this.reverse = false;
        this.acStatus = {};
        this.busy = false;
        this.busy = true;
        this.databaseService.setDb("aircraft-database");
        this.databaseService.createView("aircraft", "aircraft");
        this.aircraft = this.databaseService.query("aircraft");
        this.hourList = this.sortByHours(this.aircraft);
        this.busy = false;
    }
    FleetService.prototype.makeNewAircraft = function (aircraft) {
        var documentId = this.databaseService.createDocument({
            "mcType": "aircraft",
            "rego": aircraft.rego,
            "ttis": aircraft.ttis,
            "type": aircraft.type,
            "hrsAtMaint": aircraft.hrsAtMaint,
            "engineHrsAtMaint": aircraft.engineHrsAtMaint,
            "propHrsAtMaint": aircraft.propHrsAtMaint,
            "clockTime": aircraft.clockTime,
            "clockOffset": aircraft.clockOffset,
            "maintenance": aircraft.maintenance
        }, "aircraft");
    };
    FleetService.prototype.getAircraftStatusItems = function (ac) {
        ac.ttis = this.aircraftService.getTtis(ac);
        var summary = '';
        if (this.getDaysLeft(ac) < 30) {
            summary += "annual\n";
        }
        if (this.aircraftService.getHrsLeft(ac) < 10) {
            summary += "100hrly\n";
        }
        for (var i = 0; i < ac.maintenance.length; i++) {
            var item = ac.maintenance[i];
            if (item.maintenance !== "") {
                var hleft = undefined;
                var dleft = undefined;
                if (item.type == 'hours') {
                    hleft = item.dueHrs - ac.ttis;
                    if (hleft < 10) {
                        summary += item.maintenance + "\n";
                    }
                }
                else {
                    dleft = this.aircraftService.getMaintDaysLeft(item.dueDateTuple);
                    if (dleft < 10) {
                        summary += item.maintenance + "\n";
                    }
                }
            }
        }
        for (var i = 0; i < ac.propHrsAtMaint.length; i++) {
            var hleft = Math.round((ac.engineHrsAtMaint[i] - ac.ttis) * 10) / 10;
            if (hleft < 100) {
                summary += "Eng O/H\n";
            }
            var h2left = Math.round((ac.propHrsAtMaint[i] - ac.ttis) * 10) / 10;
            if (h2left < 50) {
                summary += "Prop O/H\n";
            }
        }
        this.acStatus[ac.rego] = false;
        if (summary !== '') {
            this.acStatus[ac.rego] = true;
        }
        return summary;
    };
    FleetService.prototype.getBusy = function () {
        return this.busy;
    };
    FleetService.prototype.setBusy = function () {
        this.busy = true;
    };
    FleetService.prototype.getStatus = function (rego) {
        return this.acStatus[rego];
    };
    ;
    FleetService.prototype.getFleet = function () {
        this.busy = true;
        this.databaseService.createView("aircraft", "aircraft");
        this.aircraft = this.databaseService.query("aircraft");
        this.hourList = this.sortByHours(this.aircraft);
        this.busy = false;
        return this.aircraft;
    };
    FleetService.prototype.getAircraft = function (id) {
        return this.aircraft.filter(function (aircraft) { return aircraft._id === id; })[0];
    };
    FleetService.prototype.deleteAircraft = function (id) {
        this.databaseService.deleteDocument(id);
        this.getFleet();
    };
    FleetService.prototype.getDaysLeft = function (ac) {
        return this.aircraftService.getDaysLeft(ac);
    };
    FleetService.prototype.regoExists = function (rego) {
        var r = this.aircraft.filter(function (aircraft) { return aircraft.rego === rego; })[0];
        return (r !== undefined);
    };
    FleetService.prototype.compareByDate = function (a, b) {
        var aLeft = a.daysLeft;
        var bLeft = b.daysLeft;
        if (aLeft === undefined) {
            aLeft = 10000;
        }
        if (bLeft === undefined) {
            bLeft = 10000;
        }
        if (aLeft < bLeft) {
            return -1;
        }
        if (aLeft > bLeft) {
            return 1;
        }
        if (a.type === 'hours') {
            return this.compareByHours(a, b);
        }
        return 0;
    };
    FleetService.prototype.compareByEstimatedDate = function (a, b) {
        var aLeft = a.daysLeft;
        var bLeft = b.daysLeft;
        if ((a.hoursLeft !== undefined) && (a.daysLeft !== undefined)) {
            if ((a.hoursLeft / 2) < aLeft) {
                aLeft = a.hoursLeft / 2;
            }
        }
        if ((b.hoursLeft !== undefined) && (b.daysLeft !== undefined)) {
            if ((b.hoursLeft / 2) < bLeft) {
                bLeft = b.hoursLeft / 2;
            }
        }
        if (aLeft === undefined) {
            aLeft = 10000;
        }
        if (bLeft === undefined) {
            bLeft = 10000;
        }
        if (a.type === 'hours') {
            aLeft = a.hoursLeft / 2;
        }
        if (b.type === 'hours') {
            bLeft = b.hoursLeft / 2;
        }
        if (aLeft < bLeft) {
            return -1;
        }
        if (aLeft > bLeft) {
            return 1;
        }
        return 0;
    };
    FleetService.prototype.compareByHours = function (a, b) {
        var aLeft = a.hoursLeft;
        var bLeft = b.hoursLeft;
        if (aLeft === undefined) {
            aLeft = 10000;
        }
        if (bLeft === undefined) {
            bLeft = 10000;
        }
        if (aLeft < bLeft) {
            return -1;
        }
        if (aLeft > bLeft) {
            return 1;
        }
        if (a.type === 'date') {
            return this.compareByDate(a, b);
        }
        return 0;
    };
    FleetService.prototype.compareByType = function (a, b) {
        var aLeft = a.type;
        var bLeft = b.type;
        if (aLeft < bLeft) {
            return -1;
        }
        if (aLeft > bLeft) {
            return 1;
        }
        if (a.rego < b.rego) {
            return -1;
        }
        if (a.rego > b.rego) {
            return 1;
        }
        return 0;
    };
    FleetService.prototype.getDate = function () {
        return this.dateList;
    };
    FleetService.prototype.getEstimatedDate = function () {
        return this.estimatedDateList;
    };
    FleetService.prototype.getHours = function () {
        return this.hourList;
    };
    FleetService.prototype.getType = function () {
        return this.typeList;
    };
    FleetService.prototype.reverseSort = function () {
        this.reverse = !this.reverse;
    };
    FleetService.prototype.sortByHours = function (aircraft) {
        var _this = this;
        this.hourList = [];
        this.dateList = [];
        for (var i = 0; i < aircraft.length; i++) {
            var ac = aircraft[i];
            this.hourList.push({
                '_id': ac._id,
                'rego': ac.rego,
                'item': '100 hourly',
                'hoursLeft': this.aircraftService.getHrsLeft(ac),
                'daysLeft': this.aircraftService.getDaysLeft(ac)
            });
            for (var j = 0; j < ac.maintenance.length; j++) {
                var item = ac.maintenance[j];
                if (item.maintenance !== "") {
                    var hleft = undefined;
                    var dleft = undefined;
                    if (item.type == 'hours') {
                        hleft = item.dueHrs - ac.ttis;
                    }
                    else {
                        dleft = this.aircraftService.getMaintDaysLeft(item.dueDateTuple);
                    }
                    this.hourList.push({
                        '_id': ac._id,
                        'rego': ac.rego,
                        'type': item.type,
                        'item': item.maintenance,
                        'hoursLeft': hleft,
                        'daysLeft': dleft
                    });
                }
            }
            for (var j = 0; j < ac.propHrsAtMaint.length; j++) {
                var hleft = Math.round((ac.engineHrsAtMaint[j] - ac.ttis) * 10) / 10;
                this.hourList.push({
                    '_id': ac._id,
                    'rego': ac.rego,
                    'type': 'hours',
                    'item': 'engine o/h',
                    'hoursLeft': hleft,
                    'daysLeft': undefined
                });
                hleft = Math.round((ac.propHrsAtMaint[j] - ac.ttis) * 10) / 10;
                this.hourList.push({
                    '_id': ac._id,
                    'rego': ac.rego,
                    'type': 'hours',
                    'item': 'prop o/h',
                    'hoursLeft': hleft,
                    'daysLeft': undefined
                });
            }
        }
        this.hourList = this.hourList.sort(function (a, b) { return _this.compareByHours(a, b); });
        this.dateList = Object.assign([], this.hourList);
        this.dateList = this.dateList.sort(function (a, b) { return _this.compareByDate(a, b); });
        this.estimatedDateList = Object.assign([], this.hourList);
        this.estimatedDateList = this.estimatedDateList.sort(function (a, b) { return _this.compareByEstimatedDate(a, b); });
        this.typeList = Object.assign([], this.hourList);
        this.typeList = this.typeList.sort(function (a, b) { return _this.compareByType(a, b); });
        if (this.reverse) {
            this.hourList = this.hourList.reverse();
        }
        return this.hourList;
    };
    FleetService.prototype.updateAircraft = function (ac) {
        this.databaseService.updateDocument(ac);
        this.getFleet();
    };
    FleetService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [aircraft_service_1.AircraftService,
            database_service_1.DatabaseService])
    ], FleetService);
    return FleetService;
}());
exports.FleetService = FleetService;
//# sourceMappingURL=data:application/json;base64,