"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var aircraft_service_1 = require("./aircraft.service");
var database_service_1 = require("./database.service");
var FleetService = /** @class */ (function () {
    function FleetService(aircraftService, databaseService) {
        this.aircraftService = aircraftService;
        this.databaseService = databaseService;
        this.reverse = false;
        this.acStatus = {};
        this.databaseService.setDb("aircraft-database");
        this.databaseService.createView("aircraft", "aircraft");
        this.aircraft = this.databaseService.query("aircraft");
        this.hourList = this.sortByHours(this.aircraft);
    }
    FleetService.prototype.makeNewAircraft = function (aircraft) {
        var documentId = this.databaseService.createDocument({
            "mcType": "aircraft",
            "rego": aircraft.rego,
            "ttis": aircraft.ttis,
            "type": aircraft.type,
            "hrsAtMaint": aircraft.hrsAtMaint,
            "engineHrsAtMaint": aircraft.engineHrsAtMaint,
            "propHrsAtMaint": aircraft.propHrsAtMaint,
            "clockTime": aircraft.clockTime,
            "clockOffset": aircraft.clockOffset,
            "maintenance": aircraft.maintenance
        }, "aircraft");
    };
    FleetService.prototype.getAircraftStatusItems = function (ac) {
        ac.ttis = this.aircraftService.getTtis(ac);
        var summary = '';
        if (this.getDaysLeft(ac) < 30) {
            summary += "annual\n";
        }
        if (this.aircraftService.getHrsLeft(ac) < 10) {
            summary += "100hrly\n";
        }
        for (var i = 0; i < ac.maintenance.length; i++) {
            var item = ac.maintenance[i];
            if (item.maintenance !== "") {
                var hleft = undefined;
                var dleft = undefined;
                if (item.type == 'hours') {
                    hleft = item.dueHrs - ac.ttis;
                    if (hleft < 10) {
                        summary += item.maintenance + "\n";
                    }
                }
                else {
                    dleft = this.aircraftService.getMaintDaysLeft(item.dueDateTuple);
                    if (dleft < 10) {
                        summary += item.maintenance + "\n";
                    }
                }
            }
        }
        for (var i = 0; i < ac.propHrsAtMaint.length; i++) {
            var hleft = Math.round((ac.engineHrsAtMaint[i] - ac.ttis) * 10) / 10;
            if (hleft < 100) {
                summary += "Eng O/H\n";
            }
            var h2left = Math.round((ac.propHrsAtMaint[i] - ac.ttis) * 10) / 10;
            if (h2left < 50) {
                summary += "Prop O/H\n";
            }
        }
        this.acStatus[ac.rego] = false;
        if (summary !== '') {
            this.acStatus[ac.rego] = true;
        }
        return summary;
    };
    FleetService.prototype.getStatus = function (rego) {
        return this.acStatus[rego];
    };
    ;
    FleetService.prototype.getFleet = function () {
        this.databaseService.createView("aircraft", "aircraft");
        this.aircraft = this.databaseService.query("aircraft");
        this.hourList = this.sortByHours(this.aircraft);
        return this.aircraft;
    };
    FleetService.prototype.getAircraft = function (id) {
        return this.aircraft.filter(function (aircraft) { return aircraft._id === id; })[0];
    };
    FleetService.prototype.deleteAircraft = function (id) {
        this.databaseService.deleteDocument(id);
        this.getFleet();
    };
    FleetService.prototype.getDaysLeft = function (ac) {
        return this.aircraftService.getDaysLeft(ac);
    };
    FleetService.prototype.regoExists = function (rego) {
        var r = this.aircraft.filter(function (aircraft) { return aircraft.rego === rego; })[0];
        return (r !== undefined);
    };
    FleetService.prototype.compareByDate = function (a, b) {
        var aLeft = a.daysLeft;
        var bLeft = b.daysLeft;
        if (aLeft === undefined) {
            aLeft = 10000;
        }
        if (bLeft === undefined) {
            bLeft = 10000;
        }
        if (aLeft < bLeft) {
            return -1;
        }
        if (aLeft > bLeft) {
            return 1;
        }
        if (a.type === 'hours') {
            return this.compareByHours(a, b);
        }
        return 0;
    };
    FleetService.prototype.compareByEstimatedDate = function (a, b) {
        var aLeft = a.daysLeft;
        var bLeft = b.daysLeft;
        if ((a.hoursLeft !== undefined) && (a.daysLeft !== undefined)) {
            if ((a.hoursLeft / 2) < aLeft) {
                aLeft = a.hoursLeft / 2;
            }
        }
        if ((b.hoursLeft !== undefined) && (b.daysLeft !== undefined)) {
            if ((b.hoursLeft / 2) < bLeft) {
                bLeft = b.hoursLeft / 2;
            }
        }
        if (aLeft === undefined) {
            aLeft = 10000;
        }
        if (bLeft === undefined) {
            bLeft = 10000;
        }
        if (a.type === 'hours') {
            aLeft = a.hoursLeft / 2;
        }
        if (b.type === 'hours') {
            bLeft = b.hoursLeft / 2;
        }
        if (aLeft < bLeft) {
            return -1;
        }
        if (aLeft > bLeft) {
            return 1;
        }
        return 0;
    };
    FleetService.prototype.compareByHours = function (a, b) {
        var aLeft = a.hoursLeft;
        var bLeft = b.hoursLeft;
        if (aLeft === undefined) {
            aLeft = 10000;
        }
        if (bLeft === undefined) {
            bLeft = 10000;
        }
        if (aLeft < bLeft) {
            return -1;
        }
        if (aLeft > bLeft) {
            return 1;
        }
        if (a.type === 'date') {
            return this.compareByDate(a, b);
        }
        return 0;
    };
    FleetService.prototype.compareByType = function (a, b) {
        var aLeft = a.type;
        var bLeft = b.type;
        if (aLeft < bLeft) {
            return -1;
        }
        if (aLeft > bLeft) {
            return 1;
        }
        if (a.rego < b.rego) {
            return -1;
        }
        if (a.rego > b.rego) {
            return 1;
        }
        return 0;
    };
    FleetService.prototype.getDate = function () {
        return this.dateList;
    };
    FleetService.prototype.getEstimatedDate = function () {
        return this.estimatedDateList;
    };
    FleetService.prototype.getHours = function () {
        return this.hourList;
    };
    FleetService.prototype.getType = function () {
        return this.typeList;
    };
    FleetService.prototype.reverseSort = function () {
        this.reverse = !this.reverse;
    };
    FleetService.prototype.sortByHours = function (aircraft) {
        var _this = this;
        this.hourList = [];
        this.dateList = [];
        for (var i = 0; i < aircraft.length; i++) {
            var ac = aircraft[i];
            this.hourList.push({
                '_id': ac._id,
                'rego': ac.rego,
                'item': '100 hourly',
                'hoursLeft': this.aircraftService.getHrsLeft(ac),
                'daysLeft': this.aircraftService.getDaysLeft(ac)
            });
            for (var j = 0; j < ac.maintenance.length; j++) {
                var item = ac.maintenance[j];
                if (item.maintenance !== "") {
                    var hleft = undefined;
                    var dleft = undefined;
                    if (item.type == 'hours') {
                        hleft = item.dueHrs - ac.ttis;
                    }
                    else {
                        dleft = this.aircraftService.getMaintDaysLeft(item.dueDateTuple);
                    }
                    this.hourList.push({
                        '_id': ac._id,
                        'rego': ac.rego,
                        'type': item.type,
                        'item': item.maintenance,
                        'hoursLeft': hleft,
                        'daysLeft': dleft
                    });
                }
            }
            for (var j = 0; j < ac.propHrsAtMaint.length; j++) {
                var hleft = Math.round((ac.engineHrsAtMaint[j] - ac.ttis) * 10) / 10;
                this.hourList.push({
                    '_id': ac._id,
                    'rego': ac.rego,
                    'type': 'hours',
                    'item': 'engine o/h',
                    'hoursLeft': hleft,
                    'daysLeft': undefined
                });
                hleft = Math.round((ac.propHrsAtMaint[j] - ac.ttis) * 10) / 10;
                this.hourList.push({
                    '_id': ac._id,
                    'rego': ac.rego,
                    'type': 'hours',
                    'item': 'prop o/h',
                    'hoursLeft': hleft,
                    'daysLeft': undefined
                });
            }
        }
        this.hourList = this.hourList.sort(function (a, b) { return _this.compareByHours(a, b); });
        this.dateList = Object.assign([], this.hourList);
        this.dateList = this.dateList.sort(function (a, b) { return _this.compareByDate(a, b); });
        this.estimatedDateList = Object.assign([], this.hourList);
        this.estimatedDateList = this.estimatedDateList.sort(function (a, b) { return _this.compareByEstimatedDate(a, b); });
        this.typeList = Object.assign([], this.hourList);
        this.typeList = this.typeList.sort(function (a, b) { return _this.compareByType(a, b); });
        if (this.reverse) {
            this.hourList = this.hourList.reverse();
        }
        return this.hourList;
    };
    FleetService.prototype.updateAircraft = function (ac) {
        this.databaseService.updateDocument(ac);
        this.getFleet();
    };
    FleetService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [aircraft_service_1.AircraftService,
            database_service_1.DatabaseService])
    ], FleetService);
    return FleetService;
}());
exports.FleetService = FleetService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxlZXQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImZsZWV0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxzQ0FBMkM7QUFFM0MsdURBQXFEO0FBQ3JELHVEQUFxRDtBQUtyRDtJQVNFLHNCQUFvQixlQUFnQyxFQUN0QyxlQUFnQztRQUQxQixvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUFDdEMsb0JBQWUsR0FBZixlQUFlLENBQWlCO1FBUnBDLFlBQU8sR0FBWSxLQUFLLENBQUM7UUFLekIsYUFBUSxHQUFRLEVBQUUsQ0FBQztRQUt2QixJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBQ2hELElBQUksQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDLFVBQVUsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUV4RCxJQUFJLENBQUMsUUFBUSxHQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3hELElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUVNLHNDQUFlLEdBQXRCLFVBQXVCLFFBQWtCO1FBQ2pDLElBQUksVUFBVSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsY0FBYyxDQUFDO1lBQ3JDLFFBQVEsRUFBRSxVQUFVO1lBQ3BCLE1BQU0sRUFBRSxRQUFRLENBQUMsSUFBSTtZQUNyQixNQUFNLEVBQUUsUUFBUSxDQUFDLElBQUk7WUFDckIsTUFBTSxFQUFFLFFBQVEsQ0FBQyxJQUFJO1lBQ3JCLFlBQVksRUFBRSxRQUFRLENBQUMsVUFBVTtZQUNqQyxrQkFBa0IsRUFBRSxRQUFRLENBQUMsZ0JBQWdCO1lBQzdDLGdCQUFnQixFQUFFLFFBQVEsQ0FBQyxjQUFjO1lBQ3pDLFdBQVcsRUFBRSxRQUFRLENBQUMsU0FBUztZQUMvQixhQUFhLEVBQUUs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QXNCLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFqQyxDQUFpQyxDQUFDLENBQUM7UUFFbEcsSUFBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDakQsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxVQUFDLENBQUMsRUFBRSxDQUFDLElBQUssT0FBQSxLQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBeEIsQ0FBd0IsQ0FBQyxDQUFDO1FBRXZFLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ1gsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ2hELENBQUM7UUFDRCxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN6QixDQUFDO0lBRU0scUNBQWMsR0FBckIsVUFBc0IsRUFBWTtRQUMxQixJQUFJLENBQUMsZUFBZSxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN4QyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDeEIsQ0FBQztJQXpUUSxZQUFZO1FBRHhCLGlCQUFVLEVBQUU7eUNBVTBCLGtDQUFlO1lBQ3JCLGtDQUFlO09BVm5DLFlBQVksQ0EyVHhCO0lBQUQsbUJBQUM7Q0FBQSxBQTNURCxJQTJUQztBQTNUWSxvQ0FBWSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgQWlyY3JhZnRTZXJ2aWNlIH0gZnJvbSBcIi4vYWlyY3JhZnQuc2VydmljZVwiO1xuaW1wb3J0IHsgRGF0YWJhc2VTZXJ2aWNlIH0gZnJvbSBcIi4vZGF0YWJhc2Uuc2VydmljZVwiO1xuXG5pbXBvcnQgeyBBaXJjcmFmdCwgTWFpbnRlbmFuY2VJdGVtIH0gZnJvbSBcIi4vYWlyY3JhZnRcIjtcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEZsZWV0U2VydmljZSB7XG4gICAgcHJpdmF0ZSBhaXJjcmFmdDogQWlyY3JhZnRbXTtcbiAgICBwcml2YXRlIHJldmVyc2U6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBwcml2YXRlIGRhdGVMaXN0OiBhbnlbXTtcbiAgICBwcml2YXRlIGhvdXJMaXN0OiBhbnlbXTtcbiAgICBwcml2YXRlIHR5cGVMaXN0OiBhbnlbXTtcbiAgICBwcml2YXRlIGVzdGltYXRlZERhdGVMaXN0OiBhbnlbXTtcbiAgICBwcml2YXRlIGFjU3RhdHVzOiBhbnkgPSB7fTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGFpcmNyYWZ0U2VydmljZTogQWlyY3JhZnRTZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIGRhdGFiYXNlU2VydmljZTogRGF0YWJhc2VTZXJ2aWNlKSB7IFxuXG4gICAgICAgIHRoaXMuZGF0YWJhc2VTZXJ2aWNlLnNldERiKFwiYWlyY3JhZnQtZGF0YWJhc2VcIik7XG4gICAgICAgIHRoaXMuZGF0YWJhc2VTZXJ2aWNlLmNyZWF0ZVZpZXcoXCJhaXJjcmFmdFwiLCBcImFpcmNyYWZ0XCIpO1xuXG4gICAgICAgIHRoaXMuYWlyY3JhZnQgPSAgdGhpcy5kYXRhYmFzZVNlcnZpY2UucXVlcnkoXCJhaXJjcmFmdFwiKTtcbiAgICAgICAgdGhpcy5ob3VyTGlzdCA9IHRoaXMuc29ydEJ5SG91cnModGhpcy5haXJjcmFmdCk7XG4gICAgfVxuXG4gICAgcHVibGljIG1ha2VOZXdBaXJjcmFmdChhaXJjcmFmdDogQWlyY3JhZnQpIHtcbiAgICAgICAgICAgIGxldCBkb2N1bWVudElkID0gdGhpcy5kYXRhYmFzZVNlcnZpY2UuY3JlYXRlRG9jdW1lbnQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibWNUeXBlXCI6IFwiYWlyY3JhZnRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInJlZ29cIjogYWlyY3JhZnQucmVnbyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInR0aXNcIjogYWlyY3JhZnQudHRpcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogYWlyY3JhZnQudHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImhyc0F0TWFpbnRcIjogYWlyY3JhZnQuaHJzQXRNYWludCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImVuZ2luZUhyc0F0TWFpbnRcIjogYWlyY3JhZnQuZW5naW5lSHJzQXRNYWludCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInByb3BIcnNBdE1haW50XCI6IGFpcmNyYWZ0LnByb3BIcnNBdE1haW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY2xvY2tUaW1lXCI6IGFpcmNyYWZ0LmNsb2NrVGltZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImNsb2NrT2Zmc2V0XCI6IGFpcmNyYWZ0LmNsb2NrT2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibWFpbnRlbmFuY2VcIjogYWlyY3JhZnQubWFpbnRlbmFuY2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBcImFpcmNyYWZ0XCIpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRBaXJjcmFmdFN0YXR1c0l0ZW1zKGFjOiBBaXJjcmFmdCkge1xuICAgICAgICBhYy50dGlzID0gdGhpcy5haXJjcmFmdFNlcnZpY2UuZ2V0VHRpcyhhYyk7XG4gICAgICAgIGxldCBzdW1tYXJ5ID0gJyc7XG4gICAgICAgIGlmICh0aGlzLmdldERheXNMZWZ0KGFjKSA8IDMwKSB7XG4gICAgICAgICAgICAgICAgc3VtbWFyeSArPSBcImFubnVhbFxcblwiO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmFpcmNyYWZ0U2VydmljZS5nZXRIcnNMZWZ0KGFjKSA8IDEwKSB7XG4gICAgICAgICAgICAgICAgc3VtbWFyeSArPSBcIjEwMGhybHlcXG5cIjtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFjLm1haW50ZW5hbmNlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IGl0ZW06IE1haW50ZW5hbmNlSXRlbSA9IGFjLm1haW50ZW5hbmNlW2ldO1xuICAgICAgICAgICAgICAgIGlmIChpdGVtLm1haW50ZW5hbmNlICE9PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaGxlZnQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZGxlZnQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS50eXBlID09ICdob3VycycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGxlZnQgPSBpdGVtLmR1ZUhycyAtIGFjLnR0aXM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChobGVmdCA8IDEwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VtbWFyeSArPSBpdGVtLm1haW50ZW5hbmNlICsgXCJcXG5cIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGxlZnQgPSB0aGlzLmFpcmNyYWZ0U2VydmljZS5nZXRNYWludERheXNMZWZ0KGl0ZW0uZHVlRGF0ZVR1cGxlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGxlZnQgPCAxMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1bW1hcnkgKz0gaXRlbS5tYWludGVuYW5jZSArIFwiXFxuXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhYy5wcm9wSHJzQXRNYWludC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCBobGVmdCA9IE1hdGgucm91bmQoKGFjLmVuZ2luZUhyc0F0TWFpbnRbaV0gLSBhYy50dGlzKSAqIDEwKSAvIDEwO1xuICAgICAgICAgICAgICAgIGlmIChobGVmdCA8IDEwMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3VtbWFyeSArPSBcIkVuZyBPL0hcXG5cIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGV0IGgybGVmdCA9IE1hdGgucm91bmQoKGFjLnByb3BIcnNBdE1haW50W2ldIC0gYWMudHRpcykgKiAxMCkgLyAxMDtcbiAgICAgICAgICAgICAgICBpZiAoaDJsZWZ0IDwgNTApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1bW1hcnkgKz0gXCJQcm9wIE8vSFxcblwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFjU3RhdHVzW2FjLnJlZ29dID0gZmFsc2U7XG4gICAgICAgIGlmIChzdW1tYXJ5ICE9PSAnJykge1xuICAgICAgICAgICAgICAgIHRoaXMuYWNTdGF0dXNbYWMucmVnb10gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdW1tYXJ5O1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRTdGF0dXMocmVnbzogc3RyaW5nKSA6IGJvb2xlYW4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWNTdGF0dXNbcmVnb107XG4gICAgfTtcblxuICAgIGdldEZsZWV0KCk6IEFpcmNyYWZ0W10ge1xuICAgICAgICAgICAgdGhpcy5kYXRhYmFzZVNlcnZpY2UuY3JlYXRlVmlldyhcImFpcmNyYWZ0XCIsIFwiYWlyY3JhZnRcIik7XG4gICAgICAgICAgICB0aGlzLmFpcmNyYWZ0ID0gIHRoaXMuZGF0YWJhc2VTZXJ2aWNlLnF1ZXJ5KFwiYWlyY3JhZnRcIik7XG4gICAgICAgICAgICB0aGlzLmhvdXJMaXN0ID0gdGhpcy5zb3J0QnlIb3Vycyh0aGlzLmFpcmNyYWZ0KTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFpcmNyYWZ0O1xuICAgIH1cblxuICAgIGdldEFpcmNyYWZ0KGlkOiBzdHJpbmcpOiBBaXJjcmFmdCB7XG4gICAgICAgIHJldHVybiB0aGlzLmFpcmNyYWZ0LmZpbHRlciggYWlyY3JhZnQgPT4gYWlyY3JhZnQuX2lkID09PSBpZClbMF07XG4gICAgfVxuXG4gICAgcHVibGljIGRlbGV0ZUFpcmNyYWZ0KGlkOiBzdHJpbmcpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YWJhc2VTZXJ2aWNlLmRlbGV0ZURvY3VtZW50KGlkKTtcbiAgICAgICAgICAgIHRoaXMuZ2V0RmxlZXQoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0RGF5c0xlZnQoYWM6IEFpcmNyYWZ0KTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWlyY3JhZnRTZXJ2aWNlLmdldERheXNMZWZ0KGFjKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVnb0V4aXN0cyhyZWdvOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgbGV0IHIgPSB0aGlzLmFpcmNyYWZ0LmZpbHRlcihhaXJjcmFmdCA9PiBhaXJjcmFmdC5yZWdvID09PSByZWdvKVswXTtcbiAgICAgICAgcmV0dXJuIChyICE9PSB1bmRlZmluZWQpO1xuICAgIH1cblxuICAgIHByaXZhdGUgY29tcGFyZUJ5RGF0ZShhOiBhbnksIGI6IGFueSkge1xuICAgICAgICAgICAgbGV0IGFMZWZ0Om51bWJlciA9IGEuZGF5c0xlZnQ7XG4gICAgICAgICAgICBsZXQgYkxlZnQ6bnVtYmVyID0gYi5kYXlzTGVmdFxuXG4gICAgICAgICAgICBpZiAoYUxlZnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGFMZWZ0ID0gMTAwMDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYkxlZnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGJMZWZ0ID0gMTAwMDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChhTGVmdCA8IGJMZWZ0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhTGVmdCA+IGJMZWZ0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGEudHlwZSA9PT0gJ2hvdXJzJykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbXBhcmVCeUhvdXJzKGEsIGIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjb21wYXJlQnlFc3RpbWF0ZWREYXRlKGE6IGFueSwgYjogYW55KSB7XG4gICAgICAgICAgICBsZXQgYUxlZnQ6bnVtYmVyID0gYS5kYXlzTGVmdDtcbiAgICAgICAgICAgIGxldCBiTGVmdDpudW1iZXIgPSBiLmRheXNMZWZ0O1xuXG4gICAgICAgICAgICBpZiAoKGEuaG91cnNMZWZ0ICE9PSB1bmRlZmluZWQpICYmIChhLmRheXNMZWZ0ICE9PSB1bmRlZmluZWQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgoYS5ob3Vyc0xlZnQgLyAyKSA8IGFMZWZ0KSAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFMZWZ0ID0gYS5ob3Vyc0xlZnQgLyAyO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKGIuaG91cnNMZWZ0ICE9PSB1bmRlZmluZWQpICYmIChiLmRheXNMZWZ0ICE9PSB1bmRlZmluZWQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgoYi5ob3Vyc0xlZnQgLyAyKSA8IGJMZWZ0KSAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJMZWZ0ID0gYi5ob3Vyc0xlZnQgLyAyO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG5cbiAgICAgICAgICAgIGlmIChhTGVmdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgYUxlZnQgPSAxMDAwMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChiTGVmdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgYkxlZnQgPSAxMDAwMDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGEudHlwZSA9PT0gJ2hvdXJzJykge1xuICAgICAgICAgICAgICAgICAgICBhTGVmdCA9IGEuaG91cnNMZWZ0IC8gMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChiLnR5cGUgPT09ICdob3VycycpIHtcbiAgICAgICAgICAgICAgICAgICAgYkxlZnQgPSBiLmhvdXJzTGVmdCAvIDI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChhTGVmdCA8IGJMZWZ0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhTGVmdCA+IGJMZWZ0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjb21wYXJlQnlIb3VycyhhOiBhbnksIGI6IGFueSkge1xuICAgICAgICAgICAgbGV0IGFMZWZ0Om51bWJlciA9IGEuaG91cnNMZWZ0O1xuICAgICAgICAgICAgbGV0IGJMZWZ0Om51bWJlciA9IGIuaG91cnNMZWZ0XG5cbiAgICAgICAgICAgIGlmIChhTGVmdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgYUxlZnQgPSAxMDAwMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChiTGVmdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgYkxlZnQgPSAxMDAwMDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGFMZWZ0IDwgYkxlZnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFMZWZ0ID4gYkxlZnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYS50eXBlID09PSAnZGF0ZScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb21wYXJlQnlEYXRlKGEsIGIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjb21wYXJlQnlUeXBlKGE6IGFueSwgYjogYW55KSB7XG4gICAgICAgICAgICBsZXQgYUxlZnQ6c3RyaW5nID0gYS50eXBlO1xuICAgICAgICAgICAgbGV0IGJMZWZ0OnN0cmluZyA9IGIudHlwZVxuXG4gICAgICAgICAgICBpZiAoYUxlZnQgPCBiTGVmdCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYUxlZnQgPiBiTGVmdCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhLnJlZ28gPCBiLnJlZ28pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGEucmVnbyA+IGIucmVnbykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXREYXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRlTGlzdDtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0RXN0aW1hdGVkRGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXN0aW1hdGVkRGF0ZUxpc3Q7XG4gICAgfVxuXG4gICAgcHVibGljIGdldEhvdXJzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ob3VyTGlzdDtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0VHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHlwZUxpc3Q7XG4gICAgfVxuXG5cbiAgICBwdWJsaWMgcmV2ZXJzZVNvcnQoKSB7XG4gICAgICAgIHRoaXMucmV2ZXJzZSA9ICEgdGhpcy5yZXZlcnNlO1xuICAgIH1cblxuICAgIHB1YmxpYyBzb3J0QnlIb3VycyhhaXJjcmFmdDogQWlyY3JhZnRbXSkge1xuICAgICAgICB0aGlzLmhvdXJMaXN0ID0gW107IFxuICAgICAgICB0aGlzLmRhdGVMaXN0ID0gW107IFxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFpcmNyYWZ0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IGFjID0gYWlyY3JhZnRbaV07XG4gICAgICAgICAgICAgICAgdGhpcy5ob3VyTGlzdC5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnX2lkJzogYWMuX2lkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAncmVnbyc6IGFjLnJlZ28sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdpdGVtJzogJzEwMCBob3VybHknLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaG91cnNMZWZ0JzogdGhpcy5haXJjcmFmdFNlcnZpY2UuZ2V0SHJzTGVmdChhYyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYXlzTGVmdCc6IHRoaXMuYWlyY3JhZnRTZXJ2aWNlLmdldERheXNMZWZ0KGFjKVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBhYy5tYWludGVuYW5jZS5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGl0ZW06IE1haW50ZW5hbmNlSXRlbSA9IGFjLm1haW50ZW5hbmNlW2pdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0ubWFpbnRlbmFuY2UgIT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGhsZWZ0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZGxlZnQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLnR5cGUgPT0gJ2hvdXJzJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhsZWZ0ID0gaXRlbS5kdWVIcnMgLSBhYy50dGlzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRsZWZ0ID0gdGhpcy5haXJjcmFmdFNlcnZpY2UuZ2V0TWFpbnREYXlzTGVmdChpdGVtLmR1ZURhdGVUdXBsZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhvdXJMaXN0LnB1c2goXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdfaWQnOiBhYy5faWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3JlZ28nOiBhYy5yZWdvLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0eXBlJzogaXRlbS50eXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdpdGVtJzogaXRlbS5tYWludGVuYW5jZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaG91cnNMZWZ0JzogaGxlZnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RheXNMZWZ0JzogZGxlZnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgYWMucHJvcEhyc0F0TWFpbnQubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBobGVmdCA9IE1hdGgucm91bmQoKGFjLmVuZ2luZUhyc0F0TWFpbnRbal0gLSBhYy50dGlzKSAqIDEwKSAvIDEwO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ob3VyTGlzdC5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnX2lkJzogYWMuX2lkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdyZWdvJzogYWMucmVnbyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndHlwZSc6ICdob3VycycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2l0ZW0nOiAnZW5naW5lIG8vaCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2hvdXJzTGVmdCc6IGhsZWZ0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYXlzTGVmdCc6IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhsZWZ0ID0gTWF0aC5yb3VuZCgoYWMucHJvcEhyc0F0TWFpbnRbal0gLSBhYy50dGlzKSAqIDEwKSAvIDEwO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ob3VyTGlzdC5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnX2lkJzogYWMuX2lkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdyZWdvJzogYWMucmVnbyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndHlwZSc6ICdob3VycycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2l0ZW0nOiAncHJvcCBvL2gnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdob3Vyc0xlZnQnOiBobGVmdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGF5c0xlZnQnOiB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuaG91ckxpc3QgPSB0aGlzLmhvdXJMaXN0LnNvcnQoKGEsIGIpID0+IHRoaXMuY29tcGFyZUJ5SG91cnMoYSwgYikpO1xuXG4gICAgICAgIHRoaXMuZGF0ZUxpc3QgPSBPYmplY3QuYXNzaWduKFtdLCB0aGlzLmhvdXJMaXN0KTtcbiAgICAgICAgdGhpcy5kYXRlTGlzdCA9IHRoaXMuZGF0ZUxpc3Quc29ydCgoYSwgYikgPT4gdGhpcy5jb21wYXJlQnlEYXRlKGEsIGIpKTtcblxuICAgICAgICB0aGlzLmVzdGltYXRlZERhdGVMaXN0ID0gT2JqZWN0LmFzc2lnbihbXSwgdGhpcy5ob3VyTGlzdCk7XG4gICAgICAgIHRoaXMuZXN0aW1hdGVkRGF0ZUxpc3QgPSB0aGlzLmVzdGltYXRlZERhdGVMaXN0LnNvcnQoKGEsIGIpID0+IHRoaXMuY29tcGFyZUJ5RXN0aW1hdGVkRGF0ZShhLCBiKSk7XG5cbiAgICAgICAgdGhpcy50eXBlTGlzdCA9IE9iamVjdC5hc3NpZ24oW10sIHRoaXMuaG91ckxpc3QpO1xuICAgICAgICB0aGlzLnR5cGVMaXN0ID0gdGhpcy50eXBlTGlzdC5zb3J0KChhLCBiKSA9PiB0aGlzLmNvbXBhcmVCeVR5cGUoYSwgYikpO1xuXG4gICAgICAgIGlmICh0aGlzLnJldmVyc2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhvdXJMaXN0ID0gdGhpcy5ob3VyTGlzdC5yZXZlcnNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuaG91ckxpc3Q7XG4gICAgfSAgICBcblxuICAgIHB1YmxpYyB1cGRhdGVBaXJjcmFmdChhYzogQWlyY3JhZnQpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YWJhc2VTZXJ2aWNlLnVwZGF0ZURvY3VtZW50KGFjKTtcbiAgICAgICAgICAgIHRoaXMuZ2V0RmxlZXQoKTtcbiAgICB9XG5cbn1cbiJdfQ==