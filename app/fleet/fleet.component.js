"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var angular_1 = require("nativescript-ui-sidedrawer/angular");
var app_component_1 = require("../app.component");
var fleet_service_1 = require("../common/fleet.service");
var permissions_service_1 = require("../permissions.service");
var router_1 = require("nativescript-angular/router");
var dialogs = require("ui/dialogs");
var FleetComponent = /** @class */ (function () {
    function FleetComponent(_changeDetectionRef, routerExtensions, permissionsService, appComponent, fleetService) {
        this._changeDetectionRef = _changeDetectionRef;
        this.routerExtensions = routerExtensions;
        this.permissionsService = permissionsService;
        this.appComponent = appComponent;
        this.fleetService = fleetService;
        this.sortOrder = 'alphabetic';
        this.activity = false;
        this.acStatusDetails = {};
        this.acStatus = {};
    }
    FleetComponent.prototype.ngOnInit = function () {
        this.fleet = this.fleetService.getFleet();
        this.changeSortOrder();
        for (var i = 0; i < this.fleet.length; i++) {
            var ac = this.fleet[i];
            this.acStatusDetails[ac.rego] = this.fleetService.getAircraftStatusItems(ac);
            this.acStatus[ac.rego] = this.fleetService.getStatus(ac.rego);
        }
    };
    FleetComponent.prototype.ngAfterViewInit = function () {
        this.drawer = this.drawerComponent.sideDrawer;
        this._changeDetectionRef.detectChanges();
    };
    FleetComponent.prototype.isAdminAccess = function () {
        return this.permissionsService.isAdminAccess();
    };
    FleetComponent.prototype.can = function (action) {
        return this.permissionsService.can(action);
    };
    FleetComponent.prototype.changeSortOrder = function () {
        if (this.sortOrder === 'type') {
            this.fleet.sort(function (a, b) {
                if (a.type < b.type) {
                    return -1;
                }
                else if (a.type > b.type) {
                    return 1;
                }
                else if (a.rego < b.rego) {
                    return -1;
                }
                else if (a.rego > b.rego) {
                    return 1;
                }
                else {
                    return 0;
                }
            });
        }
        else if (this.sortOrder === 'alphabetic') {
            this.fleet.sort(function (a, b) {
                if (a.rego < b.rego) {
                    return -1;
                }
                else if (a.rego > b.rego) {
                    return 1;
                }
                else {
                    return 0;
                }
            });
        }
    };
    FleetComponent.prototype.getDaysLeft = function (ac) {
        return this.fleetService.getDaysLeft(ac);
    };
    FleetComponent.prototype.getHrsLeft = function (ac) {
        var hrs = ac.hrsAtMaint - this.getTtis(ac);
        return Math.round(hrs * 10) / 10;
    };
    FleetComponent.prototype.getTtis = function (ac) {
        return ac.clockTime + ac.clockOffset;
    };
    FleetComponent.prototype.addAircraft = function () {
        this.routerExtensions.navigate(["newAircraft"], { clearHistory: true });
    };
    FleetComponent.prototype.addUser = function () {
        var _this = this;
        dialogs.login({
            title: "Add New User",
            message: "User",
            userName: "",
            password: "",
            okButtonText: "Add",
            cancelButtonText: "Cancel"
        }).then(function (r) {
            if (r.result) {
                if (_this.permissionsService.userExists(r.userName)) {
                    alert("user: " + r.userName + " already exists");
                    return;
                }
                dialogs.action({
                    title: "User Category",
                    message: "Select User type",
                    cancelButtonText: "Cancel",
                    actions: ["Admin", "Maintainer", "Pilot", "Read Only"]
                }).then(function (c) {
                    if (c === "Read Only") {
                        c = 'default';
                    }
                    else if (c === "Pilot") {
                        c = 'pilot';
                    }
                    else if (c === "Maintainer") {
                        c = 'maintainer';
                    }
                    else if (c === "Admin") {
                        c = 'admin';
                    }
                    _this.permissionsService.addNewUser(r.userName, r.password, c);
                    _this.routerExtensions.navigate(["userAdmin", r.userName], { clearHistory: true });
                });
            }
        });
    };
    FleetComponent.prototype.removeUser = function () {
        this.routerExtensions.navigate(["userAdmin"], { clearHistory: true });
    };
    FleetComponent.prototype.userSettings = function () {
        this.routerExtensions.navigate(["userAdmin"], { clearHistory: true });
    };
    FleetComponent.prototype.logOut = function () {
        this.permissionsService.setUser('default');
        this.routerExtensions.navigate(["./user"], { clearHistory: false });
    };
    FleetComponent.prototype.toggle = function () {
        this.drawer.toggleDrawerState();
    };
    FleetComponent.prototype.toggleOrder = function () {
        if (this.sortOrder === 'type') {
            this.sortOrder = 'alphabetic';
        }
        else if (this.sortOrder === 'alphabetic') {
            this.sortOrder = 'type';
        }
        this.changeSortOrder();
    };
    __decorate([
        core_1.ViewChild(angular_1.RadSideDrawerComponent),
        __metadata("design:type", angular_1.RadSideDrawerComponent)
    ], FleetComponent.prototype, "drawerComponent", void 0);
    FleetComponent = __decorate([
        core_1.Component({
            moduleId: module.id,
            selector: 'app-fleet',
            templateUrl: './fleet.component.html',
            styleUrls: ['./fleet.component.scss']
        }),
        __metadata("design:paramtypes", [core_1.ChangeDetectorRef,
            router_1.RouterExtensions,
            permissions_service_1.PermissionsService,
            app_component_1.AppComponent,
            fleet_service_1.FleetService])
    ], FleetComponent);
    return FleetComponent;
}());
exports.FleetComponent = FleetComponent;
//# sourceMappingURL=data:application/json;base64,