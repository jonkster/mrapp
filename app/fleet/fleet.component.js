"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var angular_1 = require("nativescript-ui-sidedrawer/angular");
var app_component_1 = require("../app.component");
var fleet_service_1 = require("./fleet.service");
var router_1 = require("nativescript-angular/router");
var FleetComponent = /** @class */ (function () {
    function FleetComponent(_changeDetectionRef, routerExtensions, appComponent, fleetService) {
        this._changeDetectionRef = _changeDetectionRef;
        this.routerExtensions = routerExtensions;
        this.appComponent = appComponent;
        this.fleetService = fleetService;
        this.sortOrder = 'type';
    }
    FleetComponent.prototype.ngOnInit = function () {
        this.fleet = this.fleetService.getFleet();
        this.changeSortOrder();
    };
    FleetComponent.prototype.ngAfterViewInit = function () {
        this.drawer = this.drawerComponent.sideDrawer;
        this._changeDetectionRef.detectChanges();
    };
    FleetComponent.prototype.changeSortOrder = function () {
        if (this.sortOrder === 'type') {
            this.fleet.sort(function (a, b) {
                if (a.type < b.type) {
                    return -1;
                }
                else if (a.type > b.type) {
                    return 1;
                }
                else if (a.rego < b.rego) {
                    return -1;
                }
                else if (a.rego > b.rego) {
                    return 1;
                }
                else {
                    return 0;
                }
            });
        }
        else if (this.sortOrder === 'alphabetic') {
            this.fleet.sort(function (a, b) {
                if (a.rego < b.rego) {
                    return -1;
                }
                else if (a.rego > b.rego) {
                    return 1;
                }
                else {
                    return 0;
                }
            });
        }
    };
    FleetComponent.prototype.getDaysLeft = function (ac) {
        return this.fleetService.getDaysLeft(ac);
    };
    FleetComponent.prototype.getHrsLeft = function (ac) {
        var hrs = ac.hrsAtMaint - this.getTtis(ac);
        return Math.round(hrs * 10) / 10;
    };
    FleetComponent.prototype.getTtis = function (ac) {
        return ac.clockTime + ac.clockOffset;
    };
    FleetComponent.prototype.addAircraft = function () {
        this.routerExtensions.navigate(["newAircraft"], { clearHistory: false });
    };
    FleetComponent.prototype.toggle = function () {
        this.drawer.toggleDrawerState();
    };
    FleetComponent.prototype.toggleOrder = function () {
        if (this.sortOrder === 'type') {
            this.sortOrder = 'alphabetic';
        }
        else if (this.sortOrder === 'alphabetic') {
            this.sortOrder = 'type';
        }
        this.changeSortOrder();
    };
    __decorate([
        core_1.ViewChild(angular_1.RadSideDrawerComponent),
        __metadata("design:type", angular_1.RadSideDrawerComponent)
    ], FleetComponent.prototype, "drawerComponent", void 0);
    FleetComponent = __decorate([
        core_1.Component({
            moduleId: module.id,
            selector: 'app-fleet',
            templateUrl: './fleet.component.html',
            styleUrls: ['./fleet.component.scss']
        }),
        __metadata("design:paramtypes", [core_1.ChangeDetectorRef,
            router_1.RouterExtensions,
            app_component_1.AppComponent,
            fleet_service_1.FleetService])
    ], FleetComponent);
    return FleetComponent;
}());
exports.FleetComponent = FleetComponent;
//# sourceMappingURL=data:application/json;base64,