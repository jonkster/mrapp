"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var nativescript_couchbase_1 = require("nativescript-couchbase");
var aircraft_service_1 = require("../aircraft-details/aircraft.service");
var FleetService = /** @class */ (function () {
    function FleetService(aircraftService) {
        this.aircraftService = aircraftService;
        this.reverse = false;
        this.database = new nativescript_couchbase_1.Couchbase("aircraft-database");
        var push = this.database.createPushReplication("http://mcap.australiaeast.cloudapp.azure.com:4984/mcdata");
        //push.setBasicAuthenticator("curtis", "ce55na6789");
        var pull = this.database.createPullReplication("http://mcap.australiaeast.cloudapp.azure.com:4984/mcdata");
        //pull.setBasicAuthenticator("curtis", "ce55na6789");
        push.setContinuous(true);
        pull.setContinuous(true);
        push.start();
        pull.start();
        this.database.createView("aircraft", "1", function (document, emitter) {
            if (document.rego) {
                emitter.emit(document._id, document);
            }
        });
    }
    FleetService.prototype.makeNewAircraft = function (aircraft) {
        var documentId = this.database.createDocument({
            "rego": aircraft.rego,
            "ttis": aircraft.ttis,
            "type": aircraft.type,
            "hrsAtMaint": aircraft.hrsAtMaint,
            "engineHrsAtMaint": aircraft.engineHrsAtMaint,
            "propHrsAtMaint": aircraft.propHrsAtMaint,
            "clockTime": aircraft.clockTime,
            "clockOffset": aircraft.clockOffset,
            "maintenance": aircraft.maintenance
        });
    };
    FleetService.prototype.getFleet = function () {
        this.query();
        return this.aircraft;
    };
    FleetService.prototype.getAircraft = function (id) {
        return this.aircraft.filter(function (aircraft) { return aircraft._id === id; })[0];
    };
    FleetService.prototype.deleteAircraft = function (id) {
        this.database.deleteDocument(id);
        this.aircraft = this.database.executeQuery("aircraft");
    };
    FleetService.prototype.getDaysLeft = function (ac) {
        return this.aircraftService.getDaysLeft(ac);
    };
    FleetService.prototype.query = function () {
        this.aircraft = this.database.executeQuery("aircraft");
        this.hourList = this.sortByHours(this.aircraft);
    };
    FleetService.prototype.regoExists = function (rego) {
        var r = this.aircraft.filter(function (aircraft) { return aircraft.rego === rego; })[0];
        return (r !== undefined);
    };
    FleetService.prototype.compareByDate = function (a, b) {
        var aLeft = a.daysLeft;
        var bLeft = b.daysLeft;
        if (aLeft === undefined) {
            aLeft = 10000;
        }
        if (bLeft === undefined) {
            bLeft = 10000;
        }
        if (aLeft < bLeft) {
            return -1;
        }
        if (aLeft > bLeft) {
            return 1;
        }
        if (a.type === 'hours') {
            return this.compareByHours(a, b);
        }
        return 0;
    };
    FleetService.prototype.compareByEstimatedDate = function (a, b) {
        var aLeft = a.daysLeft;
        var bLeft = b.daysLeft;
        if (aLeft === undefined) {
            aLeft = 10000;
        }
        if (bLeft === undefined) {
            bLeft = 10000;
        }
        if (a.type === 'hours') {
            aLeft = a.hoursLeft / 2;
        }
        if (b.type === 'hours') {
            bLeft = b.hoursLeft / 2;
        }
        if (aLeft < bLeft) {
            return -1;
        }
        if (aLeft > bLeft) {
            return 1;
        }
        return 0;
    };
    FleetService.prototype.compareByHours = function (a, b) {
        var aLeft = a.hoursLeft;
        var bLeft = b.hoursLeft;
        if (aLeft === undefined) {
            aLeft = 10000;
        }
        if (bLeft === undefined) {
            bLeft = 10000;
        }
        if (aLeft < bLeft) {
            return -1;
        }
        if (aLeft > bLeft) {
            return 1;
        }
        if (a.type === 'date') {
            return this.compareByDate(a, b);
        }
        return 0;
    };
    FleetService.prototype.getDate = function () {
        return this.dateList;
    };
    FleetService.prototype.getEstimatedDate = function () {
        return this.estimatedDateList;
    };
    FleetService.prototype.getHours = function () {
        return this.hourList;
    };
    FleetService.prototype.reverseSort = function () {
        this.reverse = !this.reverse;
    };
    FleetService.prototype.sortByHours = function (aircraft) {
        var _this = this;
        this.hourList = [];
        this.dateList = [];
        for (var i = 0; i < aircraft.length; i++) {
            var ac = aircraft[i];
            this.hourList.push({
                '_id': ac._id,
                'rego': ac.rego,
                'item': '100 hourly',
                'hoursLeft': this.aircraftService.getHrsLeft(ac),
                'daysLeft': this.aircraftService.getDaysLeft(ac)
            });
            for (var j = 0; j < ac.maintenance.length; j++) {
                var item = ac.maintenance[j];
                if (item.maintenance !== "") {
                    var hleft = undefined;
                    var dleft = undefined;
                    if (item.type == 'hours') {
                        hleft = item.dueHrs - ac.ttis;
                    }
                    else {
                        dleft = this.aircraftService.getMaintDaysLeft(item.dueDateTuple);
                    }
                    this.hourList.push({
                        '_id': ac._id,
                        'rego': ac.rego,
                        'type': item.type,
                        'item': item.maintenance,
                        'hoursLeft': hleft,
                        'daysLeft': dleft
                    });
                }
            }
        }
        this.hourList = this.hourList.sort(function (a, b) { return _this.compareByHours(a, b); });
        this.dateList = Object.assign([], this.hourList);
        this.dateList = this.dateList.sort(function (a, b) { return _this.compareByDate(a, b); });
        this.estimatedDateList = Object.assign([], this.hourList);
        this.estimatedDateList = this.estimatedDateList.sort(function (a, b) { return _this.compareByEstimatedDate(a, b); });
        if (this.reverse) {
            this.hourList = this.hourList.reverse();
        }
        return this.hourList;
    };
    FleetService.prototype.updateAircraft = function (ac) {
        this.database.updateDocument(ac._id, ac);
        this.aircraft = this.database.executeQuery("aircraft");
    };
    FleetService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [aircraft_service_1.AircraftService])
    ], FleetService);
    return FleetService;
}());
exports.FleetService = FleetService;
//# sourceMappingURL=data:application/json;base64,