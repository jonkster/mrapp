"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var router_1 = require("@angular/router");
var router_2 = require("nativescript-angular/router");
var fleet_service_1 = require("../common/fleet.service");
var aircraft_service_1 = require("../common/aircraft.service");
var permissions_service_1 = require("../permissions.service");
var dialogs = require("ui/dialogs");
var AircraftDetailsComponent = /** @class */ (function () {
    function AircraftDetailsComponent(route, routerExtensions, aircraftService, permissionsService, fleetService) {
        this.route = route;
        this.routerExtensions = routerExtensions;
        this.aircraftService = aircraftService;
        this.permissionsService = permissionsService;
        this.fleetService = fleetService;
        this.hoursLeft = 0;
        this.daysLeft = 0;
        this.engineLeft = ['0', '0'];
        this.propLeft = ['0', '0'];
    }
    AircraftDetailsComponent.prototype.ngOnInit = function () {
        var id = this.route.snapshot.params["id"];
        this.aircraft = this.fleetService.getAircraft(id);
        this.updateValues();
    };
    AircraftDetailsComponent.prototype.can = function (action) {
        return this.permissionsService.can(action);
    };
    AircraftDetailsComponent.prototype.getEngine = function (num) {
        var v = this.aircraft.engineHrsAtMaint[num].toString();
        if (v === '987654321') {
            v = 'OC';
        }
        return v;
    };
    AircraftDetailsComponent.prototype.getProp = function (num) {
        var v = this.aircraft.propHrsAtMaint[num].toString();
        if (v === '987654321') {
            v = 'OC';
        }
        return v;
    };
    AircraftDetailsComponent.prototype.updateValues = function () {
        this.hoursLeft = this.aircraftService.getHrsLeft(this.aircraft);
        this.daysLeft = this.aircraftService.getDaysLeft(this.aircraft);
        for (var i = 0; i < this.aircraft.engineHrsAtMaint.length; i++) {
            this.engineLeft[i] = this.aircraftService.getEngineLeft(this.aircraft, i + 1).toString();
            this.propLeft[i] = this.aircraftService.getPropLeft(this.aircraft, i + 1).toString();
            if (this.aircraft.engineHrsAtMaint[i] === 987654321) {
                this.engineLeft[i] = 'OC';
            }
            if (this.aircraft.propHrsAtMaint[i] === 987654321) {
                this.propLeft[i] = 'OC';
            }
        }
    };
    AircraftDetailsComponent.prototype.adjustClockTime = function (args) {
        var textField = args.object;
        this.aircraft.clockTime = parseInt(textField.text);
    };
    AircraftDetailsComponent.prototype.adjustOffsetTime = function (args) {
        var textField = args.object;
        this.aircraft.clockOffset = parseInt(textField.text);
    };
    AircraftDetailsComponent.prototype.doubleConfirmDelete = function (ac) {
        var _this = this;
        dialogs.confirm({
            title: "Delete Aircraft",
            message: "If you enter Delete, " + ac.rego + " WILL BE DELETED!",
            okButtonText: "Keep " + ac.rego,
            cancelButtonText: "Delete",
        }).then(function (result) {
            if (!result) {
                _this.fleetService.deleteAircraft(ac._id);
                _this.routerExtensions.navigate(["/fleet"], { clearHistory: true });
            }
        });
    };
    AircraftDetailsComponent.prototype.deleteAircraft = function (ac) {
        var _this = this;
        dialogs.confirm({
            title: "Delete Aircraft",
            message: "Are you sure you want to delete " + ac.rego + "?",
            okButtonText: "Delete",
            cancelButtonText: "Keep " + ac.rego,
        }).then(function (result) {
            if (result) {
                _this.doubleConfirmDelete(ac);
            }
        });
    };
    AircraftDetailsComponent.prototype.clearMaintenanceItem = function (num) {
        var item = this.aircraft.maintenance[num];
        item.cleared = !item.cleared;
    };
    AircraftDetailsComponent.prototype.deleteMaintenanceItem = function (num) {
        var _this = this;
        var item = this.aircraft.maintenance[num];
        dialogs.confirm({
            title: "Delete Maintenance Item",
            message: "Are you sure you want to delete #" + (num + 1) + " " + item.maintenance + "?",
            okButtonText: "Delete",
            cancelButtonText: "Keep" + item.maintenance,
        }).then(function (result) {
            if (result) {
                _this.aircraft.maintenance.splice(num, 1);
            }
        });
    };
    AircraftDetailsComponent.prototype.getDateStringFromTuple = function (dt) {
        var st = "";
        if (dt !== undefined) {
            if (dt[0] !== undefined) {
                st = String(dt[0]);
            }
            if (dt[1] !== undefined) {
                st += '/' + String(dt[1]);
            }
            if (dt[2] !== undefined) {
                st += '/' + String(dt[2]);
            }
        }
        return st;
    };
    AircraftDetailsComponent.prototype.getDaysLeft = function (date) {
        var exDate = new Date(date[0], date[1] - 1, date[2]);
        var time = exDate.valueOf() - Date.now().valueOf();
        return Math.round(time / (24 * 60 * 60 * 1000));
    };
    AircraftDetailsComponent.prototype.getHoursLeft = function (hrs) {
        return Math.round((hrs - this.aircraft.ttis) * 10) / 10;
    };
    AircraftDetailsComponent.prototype.save = function (ac) {
        this.fleetService.updateAircraft(ac);
        this.routerExtensions.navigate(["/fleet"], { clearHistory: true });
    };
    AircraftDetailsComponent.prototype.onLoadDate = function (ev) {
        var datePicker = ev.object;
        if (this.aircraft.annualDateTuple[0] !== undefined) {
            datePicker.year = this.aircraft.annualDateTuple[0];
            datePicker.month = this.aircraft.annualDateTuple[1];
            datePicker.day = this.aircraft.annualDateTuple[2];
        }
    };
    AircraftDetailsComponent = __decorate([
        core_1.Component({
            moduleId: module.id,
            selector: 'app-aircraft-details',
            templateUrl: './aircraft-details.component.html',
            styleUrls: ['./aircraft-details.component.scss']
        }),
        __metadata("design:paramtypes", [router_1.ActivatedRoute,
            router_2.RouterExtensions,
            aircraft_service_1.AircraftService,
            permissions_service_1.PermissionsService,
            fleet_service_1.FleetService])
    ], AircraftDetailsComponent);
    return AircraftDetailsComponent;
}());
exports.AircraftDetailsComponent = AircraftDetailsComponent;
//# sourceMappingURL=data:application/json;base64,