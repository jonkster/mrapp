"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var permissions_service_1 = require("../permissions.service");
var router_1 = require("@angular/router");
var router_2 = require("nativescript-angular/router");
var dialogs = require("ui/dialogs");
var UserAdminComponent = /** @class */ (function () {
    function UserAdminComponent(route, routerExtensions, permissionsService) {
        this.route = route;
        this.routerExtensions = routerExtensions;
        this.permissionsService = permissionsService;
        this.user = '';
        this.group = '';
        this.pw = '';
        this.changingPw = false;
        this.activity = false;
        this.user = this.permissionsService.getCurrentUser();
        this.group = this.permissionsService.getClassOfUser(this.user);
    }
    UserAdminComponent.prototype.ngOnInit = function () {
        var id = this.route.snapshot.params["id"];
        if (id !== undefined) {
            this.user = id;
            this.group = this.permissionsService.getClassOfUser(this.user);
        }
        else {
            if (this.group === 'admin') {
                this.pickUser();
            }
        }
    };
    UserAdminComponent.prototype.can = function (action) {
        return this.permissionsService.can(action);
    };
    UserAdminComponent.prototype.savePassword = function () {
        this.permissionsService.setUserPw(this.user, this.pw);
        this.changingPw = false;
    };
    UserAdminComponent.prototype.userSpecified = function (ev) {
        var userControl = ev.object;
        var user = userControl.text;
        if (this.permissionsService.userExists(user)) {
        }
        else {
            dialogs.confirm({
                title: "Add User",
                message: user + " is not known - do you want to add as new user?",
                okButtonText: "Add User",
                cancelButtonText: "Cancel",
            }).then(function (result) {
                if (result) {
                }
            });
        }
    };
    UserAdminComponent.prototype.changePassword = function () {
        this.changingPw = true;
    };
    UserAdminComponent.prototype.deleteUser = function () {
        var _this = this;
        if (this.user !== 'admin') {
            dialogs.confirm({
                title: "Delete User: " + this.user,
                message: "If you enter Delete, " + this.user + " WILL BE DELETED!",
                okButtonText: "Keep " + this.user,
                cancelButtonText: "Delete",
            }).then(function (result) {
                if (!result) {
                    _this.permissionsService.deleteUser(_this.user);
                    alert('user ' + _this.user + ' deleted');
                    _this.routerExtensions.navigate(["/fleet"], { clearHistory: true });
                }
            });
        }
        else {
            alert("cannot remove admin account");
        }
    };
    UserAdminComponent.prototype.changeClass = function () {
        var _this = this;
        if (this.user !== 'admin') {
            dialogs.action({
                title: "User Category",
                message: "Select User category for " + this.user,
                cancelButtonText: "Cancel",
                actions: ["Admin", "Maintainer", "Pilot", "Read Only"]
            }).then(function (c) {
                if (c === "Read Only") {
                    c = 'default';
                }
                else if (c === "Pilot") {
                    c = 'pilot';
                }
                else if (c === "Maintainer") {
                    c = 'maintainer';
                }
                else if (c === "Admin") {
                    c = 'admin';
                }
                _this.permissionsService.setUserClass(_this.user, c);
                _this.routerExtensions.navigate(["userAdmin", _this.user], { clearHistory: true });
            });
        }
        else {
            alert("cannot change admin account");
        }
    };
    UserAdminComponent.prototype.pickUser = function () {
        var _this = this;
        var userNames = this.permissionsService.getUserNames();
        dialogs.action({
            title: "Select User",
            message: "Select User to Edit",
            cancelButtonText: "Cancel",
            actions: userNames
        }).then(function (c) {
            if (c === "Read Only") {
                c = 'default';
            }
            else if (c === "Pilot") {
                c = 'pilot';
            }
            else if (c === "Maintainer") {
                c = 'maintainer';
            }
            else if (c === "Admin") {
                c = 'admin';
            }
            _this.user = c;
            _this.routerExtensions.navigate(["userAdmin", _this.user], { clearHistory: true });
        });
    };
    UserAdminComponent = __decorate([
        core_1.Component({
            moduleId: module.id,
            selector: 'app-user-admin',
            templateUrl: './user-admin.component.html',
            styleUrls: ['./user-admin.component.scss']
        }),
        __metadata("design:paramtypes", [router_1.ActivatedRoute,
            router_2.RouterExtensions,
            permissions_service_1.PermissionsService])
    ], UserAdminComponent);
    return UserAdminComponent;
}());
exports.UserAdminComponent = UserAdminComponent;
//# sourceMappingURL=data:application/json;base64,