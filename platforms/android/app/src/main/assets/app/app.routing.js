"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var router_1 = require("nativescript-angular/router");
var fleet_component_1 = require("./fleet/fleet.component");
var new_aircraft_component_1 = require("./new-aircraft/new-aircraft.component");
var aircraft_details_component_1 = require("./aircraft-details/aircraft-details.component");
var maintenance_item_component_1 = require("./maintenance-item/maintenance-item.component");
var mr_expiry_component_1 = require("./mr-expiry/mr-expiry.component");
var engine_time_component_1 = require("./engine-time/engine-time.component");
var prop_time_component_1 = require("./prop-time/prop-time.component");
var clock_component_1 = require("./clock/clock.component");
var routes = [
    { path: "", redirectTo: "/fleet", pathMatch: "full" },
    { path: "fleet", component: fleet_component_1.FleetComponent },
    { path: "newAircraft", component: new_aircraft_component_1.NewAircraftComponent },
    { path: "mritem/:id", component: maintenance_item_component_1.MaintenanceItemComponent },
    { path: "mrexpiry/:id", component: mr_expiry_component_1.MrExpiryComponent },
    { path: "aircraftDetails/:id", component: aircraft_details_component_1.AircraftDetailsComponent },
    { path: "engineTime/:id", component: engine_time_component_1.EngineTimeComponent },
    { path: "propTime/:id", component: prop_time_component_1.PropTimeComponent },
    { path: "clockTime/:id", component: clock_component_1.ClockComponent }
];
var AppRoutingModule = /** @class */ (function () {
    function AppRoutingModule() {
    }
    AppRoutingModule = __decorate([
        core_1.NgModule({
            imports: [router_1.NativeScriptRouterModule.forRoot(routes)],
            exports: [router_1.NativeScriptRouterModule]
        })
    ], AppRoutingModule);
    return AppRoutingModule;
}());
exports.AppRoutingModule = AppRoutingModule;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLnJvdXRpbmcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhcHAucm91dGluZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHNDQUF5QztBQUN6QyxzREFBdUU7QUFHdkUsMkRBQXlEO0FBQ3pELGdGQUE2RTtBQUM3RSw0RkFBeUY7QUFDekYsNEZBQXlGO0FBQ3pGLHVFQUFvRTtBQUNwRSw2RUFBMEU7QUFDMUUsdUVBQW9FO0FBQ3BFLDJEQUF5RDtBQUt6RCxJQUFNLE1BQU0sR0FBVztJQUNuQixFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFO0lBQ3JELEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsZ0NBQWMsRUFBRTtJQUM1QyxFQUFFLElBQUksRUFBRSxhQUFhLEVBQUUsU0FBUyxFQUFFLDZDQUFvQixFQUFFO0lBQ3hELEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUscURBQXdCLEVBQUU7SUFDM0QsRUFBRSxJQUFJLEVBQUUsY0FBYyxFQUFFLFNBQVMsRUFBRSx1Q0FBaUIsRUFBRTtJQUN0RCxFQUFFLElBQUksRUFBRSxxQkFBcUIsRUFBRSxTQUFTLEVBQUUscURBQXdCLEVBQUU7SUFDcEUsRUFBRSxJQUFJLEVBQUUsZ0JBQWdCLEVBQUUsU0FBUyxFQUFFLDJDQUFtQixFQUFFO0lBQzFELEVBQUUsSUFBSSxFQUFFLGNBQWMsRUFBRSxTQUFTLEVBQUUsdUNBQWlCLEVBQUU7SUFDdEQsRUFBRSxJQUFJLEVBQUUsZUFBZSxFQUFFLFNBQVMsRUFBRSxnQ0FBYyxFQUFFO0NBQ3ZELENBQUM7QUFNRjtJQUFBO0lBQWdDLENBQUM7SUFBcEIsZ0JBQWdCO1FBSjVCLGVBQVEsQ0FBQztZQUNOLE9BQU8sRUFBRSxDQUFDLGlDQUF3QixDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNuRCxPQUFPLEVBQUUsQ0FBQyxpQ0FBd0IsQ0FBQztTQUN0QyxDQUFDO09BQ1csZ0JBQWdCLENBQUk7SUFBRCx1QkFBQztDQUFBLEFBQWpDLElBQWlDO0FBQXBCLDRDQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IE5hdGl2ZVNjcmlwdFJvdXRlck1vZHVsZSB9IGZyb20gXCJuYXRpdmVzY3JpcHQtYW5ndWxhci9yb3V0ZXJcIjtcbmltcG9ydCB7IFJvdXRlcyB9IGZyb20gXCJAYW5ndWxhci9yb3V0ZXJcIjtcblxuaW1wb3J0IHsgRmxlZXRDb21wb25lbnQgfSBmcm9tIFwiLi9mbGVldC9mbGVldC5jb21wb25lbnRcIjtcbmltcG9ydCB7IE5ld0FpcmNyYWZ0Q29tcG9uZW50IH0gZnJvbSBcIi4vbmV3LWFpcmNyYWZ0L25ldy1haXJjcmFmdC5jb21wb25lbnRcIjtcbmltcG9ydCB7IEFpcmNyYWZ0RGV0YWlsc0NvbXBvbmVudCB9IGZyb20gXCIuL2FpcmNyYWZ0LWRldGFpbHMvYWlyY3JhZnQtZGV0YWlscy5jb21wb25lbnRcIjtcbmltcG9ydCB7IE1haW50ZW5hbmNlSXRlbUNvbXBvbmVudCB9IGZyb20gXCIuL21haW50ZW5hbmNlLWl0ZW0vbWFpbnRlbmFuY2UtaXRlbS5jb21wb25lbnRcIjtcbmltcG9ydCB7IE1yRXhwaXJ5Q29tcG9uZW50IH0gZnJvbSBcIi4vbXItZXhwaXJ5L21yLWV4cGlyeS5jb21wb25lbnRcIjtcbmltcG9ydCB7IEVuZ2luZVRpbWVDb21wb25lbnQgfSBmcm9tIFwiLi9lbmdpbmUtdGltZS9lbmdpbmUtdGltZS5jb21wb25lbnRcIjtcbmltcG9ydCB7IFByb3BUaW1lQ29tcG9uZW50IH0gZnJvbSBcIi4vcHJvcC10aW1lL3Byb3AtdGltZS5jb21wb25lbnRcIjtcbmltcG9ydCB7IENsb2NrQ29tcG9uZW50IH0gZnJvbSBcIi4vY2xvY2svY2xvY2suY29tcG9uZW50XCI7XG5cbmltcG9ydCB7IEl0ZW1zQ29tcG9uZW50IH0gZnJvbSBcIi4vaXRlbS9pdGVtcy5jb21wb25lbnRcIjtcbmltcG9ydCB7IEl0ZW1EZXRhaWxDb21wb25lbnQgfSBmcm9tIFwiLi9pdGVtL2l0ZW0tZGV0YWlsLmNvbXBvbmVudFwiO1xuXG5jb25zdCByb3V0ZXM6IFJvdXRlcyA9IFtcbiAgICB7IHBhdGg6IFwiXCIsIHJlZGlyZWN0VG86IFwiL2ZsZWV0XCIsIHBhdGhNYXRjaDogXCJmdWxsXCIgfSxcbiAgICB7IHBhdGg6IFwiZmxlZXRcIiwgY29tcG9uZW50OiBGbGVldENvbXBvbmVudCB9LFxuICAgIHsgcGF0aDogXCJuZXdBaXJjcmFmdFwiLCBjb21wb25lbnQ6IE5ld0FpcmNyYWZ0Q29tcG9uZW50IH0sXG4gICAgeyBwYXRoOiBcIm1yaXRlbS86aWRcIiwgY29tcG9uZW50OiBNYWludGVuYW5jZUl0ZW1Db21wb25lbnQgfSxcbiAgICB7IHBhdGg6IFwibXJleHBpcnkvOmlkXCIsIGNvbXBvbmVudDogTXJFeHBpcnlDb21wb25lbnQgfSxcbiAgICB7IHBhdGg6IFwiYWlyY3JhZnREZXRhaWxzLzppZFwiLCBjb21wb25lbnQ6IEFpcmNyYWZ0RGV0YWlsc0NvbXBvbmVudCB9LFxuICAgIHsgcGF0aDogXCJlbmdpbmVUaW1lLzppZFwiLCBjb21wb25lbnQ6IEVuZ2luZVRpbWVDb21wb25lbnQgfSxcbiAgICB7IHBhdGg6IFwicHJvcFRpbWUvOmlkXCIsIGNvbXBvbmVudDogUHJvcFRpbWVDb21wb25lbnQgfSxcbiAgICB7IHBhdGg6IFwiY2xvY2tUaW1lLzppZFwiLCBjb21wb25lbnQ6IENsb2NrQ29tcG9uZW50IH1cbl07XG5cbkBOZ01vZHVsZSh7XG4gICAgaW1wb3J0czogW05hdGl2ZVNjcmlwdFJvdXRlck1vZHVsZS5mb3JSb290KHJvdXRlcyldLFxuICAgIGV4cG9ydHM6IFtOYXRpdmVTY3JpcHRSb3V0ZXJNb2R1bGVdXG59KVxuZXhwb3J0IGNsYXNzIEFwcFJvdXRpbmdNb2R1bGUgeyB9XG4iXX0=